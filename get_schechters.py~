import re
import yaml
import numpy as np
import itertools
import pylab as pl

from   scipy.interpolate import interp1d


def get_schechter(redshift, reverse=True):
  dat      = np.loadtxt('dat/schechters.txt')

  Ls       = dat[:,0]
  ts       = dat[:,1]

  infile   = open('dat/schechters.txt', 'r')
  hdr      = infile.readline()

  deets    = {2.0: {'PhiStar': 0.02327, 'alpha': -1.32}, 3.0: {'PhiStar': 0.01762, 'alpha': -1.31}, 4.0: {'PhiStar': 0.00666, 'alpha': -1.43}}

  PhiStar  = deets[redshift]['PhiStar']
  alpha    = deets[redshift]['alpha']
  
  alphas   = re.findall("\d+\.\d+", hdr)
  alphas   = np.array(alphas).astype(np.float)
  alphas   = -alphas

  idx      = (np.abs(alphas - alpha)).argmin()
  idx     += 2

  schs     = dat[:, idx]

  if reverse:
    # returns L / L* given Phi / Phi_*                                                                                                                                                                                                                                                                                                                         
    xs     = interp1d(schs, Ls, bounds_error=True)

  else:
    xs     = interp1d(Ls, schs, bounds_error=True)
    
  return  xs
  
if __name__ == '__main__':
    ys   = np.logspace(-3, np.log10(25.), num=100) 
    xs   = get_schechter(2.0)
    
    pl.semilogy(xs(ys), ys)

    for ys in [0.836675, 12.966]:
      print(ys, xs(ys))
      
      pl.loglog(xs(ys), ys, 'ro')
    
    pl.xlim(0.0,    5.0)
    pl.ylim(5.e-4, 15.0)
    
    pl.show()
    
    print('\n\nDone.\n\n')
